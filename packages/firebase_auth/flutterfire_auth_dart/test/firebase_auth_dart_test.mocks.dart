// Mocks generated by Mockito 5.0.16 from annotations
// in flutterfire_auth_dart/test/firebase_auth_dart_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutterfire_auth_dart/flutterfire_auth_dart.dart' as _i2;
import 'package:flutterfire_core_dart/flutterfire_core_dart.dart' as _i3;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeIdTokenResult_0 extends _i1.Fake implements _i2.IdTokenResult {}

class _FakeUserCredential_1 extends _i1.Fake implements _i2.UserCredential {}

class _FakeFirebaseApp_2 extends _i1.Fake implements _i3.FirebaseApp {}

class _FakeException_3 extends _i1.Fake implements Exception {}

class _FakeFirebaseAuth_4 extends _i1.Fake implements _i2.FirebaseAuth {}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i2.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  List<_i2.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i2.UserInfo>[]) as List<_i2.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i4.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<_i2.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i2.IdTokenResult>.value(_FakeIdTokenResult_0()))
          as _i4.Future<_i2.IdTokenResult>);
  @override
  _i4.Future<_i2.UserCredential> linkWithCredential(
          _i2.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential_1()))
          as _i4.Future<_i2.UserCredential>);
  @override
  _i4.Future<_i2.UserCredential> reauthenticateWithCredential(
          _i2.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential_1()))
          as _i4.Future<_i2.UserCredential>);
  @override
  _i4.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> sendEmailVerification() =>
      (super.noSuchMethod(Invocation.method(#sendEmailVerification, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(Invocation.method(#updatePhotoURL, [photoURL]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateProfile(Map<String, dynamic>? newProfile) =>
      (super.noSuchMethod(Invocation.method(#updateProfile, [newProfile]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i2.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_2()) as _i3.FirebaseApp);
  @override
  set app(_i3.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set currentUser(_i2.User? _currentUser) =>
      super.noSuchMethod(Invocation.setter(#currentUser, _currentUser),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i2.User?> get onAuthStateChanged =>
      (super.noSuchMethod(Invocation.getter(#onAuthStateChanged),
          returnValue: Stream<_i2.User?>.empty()) as _i4.Stream<_i2.User?>);
  @override
  _i4.Stream<_i2.User?> get onIdTokenChanged =>
      (super.noSuchMethod(Invocation.getter(#onIdTokenChanged),
          returnValue: Stream<_i2.User?>.empty()) as _i4.Stream<_i2.User?>);
  @override
  void setApiClient(_i5.Client? client) =>
      super.noSuchMethod(Invocation.method(#setApiClient, [client]),
          returnValueForMissingStub: null);
  @override
  void updateCurrentUserAndEvents(_i2.User? user) =>
      super.noSuchMethod(Invocation.method(#updateCurrentUserAndEvents, [user]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.UserCredential> signInWithEmailAndPassword(
          String? email, String? password) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [email, password]),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential_1()))
          as _i4.Future<_i2.UserCredential>);
  @override
  _i4.Future<_i2.UserCredential> createUserWithEmailAndPassword(
          String? email, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#createUserWithEmailAndPassword, [email, password]),
          returnValue:
              Future<_i2.UserCredential>.value(_FakeUserCredential_1())) as _i4
          .Future<_i2.UserCredential>);
  @override
  _i4.Future<List<String>> fetchSignInMethodsForEmail(String? email) => (super
          .noSuchMethod(Invocation.method(#fetchSignInMethodsForEmail, [email]),
              returnValue: Future<List<String>>.value(<String>[]))
      as _i4.Future<List<String>>);
  @override
  _i4.Future<dynamic> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#sendPasswordResetEmail, [email]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> resetUserPassword(
          {String? newPassword, String? oldPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#resetUserPassword, [],
              {#newPassword: newPassword, #oldPassword: oldPassword}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> sendSignInLinkToEmail(String? email,
          [String? continueUrl]) =>
      (super.noSuchMethod(
          Invocation.method(#sendSignInLinkToEmail, [email, continueUrl]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<_i2.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential_1()))
          as _i4.Future<_i2.UserCredential>);
  @override
  _i4.Future<_i2.UserCredential> signInWithPopup() =>
      (super.noSuchMethod(Invocation.method(#signInWithPopup, []),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential_1()))
          as _i4.Future<_i2.UserCredential>);
  @override
  _i4.Future<_i2.UserCredential> signInWithCredential(
          _i2.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithCredential, [credential]),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential_1()))
          as _i4.Future<_i2.UserCredential>);
  @override
  _i4.Future<_i2.UserCredential> signInWithEmailLink(
          String? email, String? emailLink) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailLink, [email, emailLink]),
              returnValue:
                  Future<_i2.UserCredential>.value(_FakeUserCredential_1()))
          as _i4.Future<_i2.UserCredential>);
  @override
  _i4.Future<void> verifyPhoneNumber({String? phoneNumber}) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyPhoneNumber, [], {#phoneNumber: phoneNumber}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> refreshIdToken() =>
      (super.noSuchMethod(Invocation.method(#refreshIdToken, []),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<Map<dynamic, dynamic>> useAuthEmulator(
          {String? host = r'localhost', int? port = 9099}) =>
      (super.noSuchMethod(
          Invocation.method(#useAuthEmulator, [], {#host: host, #port: port}),
          returnValue:
              Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{})) as _i4
          .Future<Map<dynamic, dynamic>>);
  @override
  Exception getException(Object? e) =>
      (super.noSuchMethod(Invocation.method(#getException, [e]),
          returnValue: _FakeException_3()) as Exception);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i2.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAuth get auth => (super.noSuchMethod(Invocation.getter(#auth),
      returnValue: _FakeFirebaseAuth_4()) as _i2.FirebaseAuth);
  @override
  String toString() => super.toString();
}
